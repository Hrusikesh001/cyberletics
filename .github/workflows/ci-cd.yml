name: Sentrifense CI/CD Pipeline

on:
  push:
    branches: [main]
  pull_request:
    branches: [main]

jobs:
  lint-and-test:
    name: Lint and Test
    runs-on: ubuntu-latest
    
    services:
      mongodb:
        image: mongo:6
        ports:
          - 27017:27017
          
    steps:
      - name: Checkout code
        uses: actions/checkout@v3
        
      - name: Setup Node.js
        uses: actions/setup-node@v3
        with:
          node-version: '18'
          cache: 'npm'
          
      - name: Install frontend dependencies
        run: npm ci
        
      - name: Lint frontend
        run: npm run lint
        
      - name: Setup backend
        working-directory: ./server
        run: |
          npm ci
          echo "PORT=5000" > .env
          echo "NODE_ENV=test" >> .env
          echo "MONGODB_URI=mongodb://localhost:27017/sentrifense-test" >> .env
          echo "JWT_SECRET=test-secret" >> .env
          echo "GOPHISH_API_KEY=test-key" >> .env
          echo "GOPHISH_BASE_URL=http://localhost:3333/api" >> .env
          
      # Add Jest test once implemented
      # - name: Run frontend tests
      #   run: npm test
      
      # Add backend tests once implemented
      # - name: Run backend tests
      #   working-directory: ./server
      #   run: npm test
  
  build:
    name: Build Application
    needs: lint-and-test
    runs-on: ubuntu-latest
    
    steps:
      - name: Checkout code
        uses: actions/checkout@v3
        
      - name: Setup Node.js
        uses: actions/setup-node@v3
        with:
          node-version: '18'
          cache: 'npm'
          
      - name: Install frontend dependencies
        run: npm ci
        
      - name: Build frontend
        run: npm run build
        
      - name: Upload frontend build artifacts
        uses: actions/upload-artifact@v3
        with:
          name: frontend-build
          path: dist/
          
      - name: Install backend dependencies
        working-directory: ./server
        run: npm ci --production
        
      - name: Upload backend artifacts
        uses: actions/upload-artifact@v3
        with:
          name: backend-build
          path: server/
  
  docker-build:
    name: Build Docker Images
    needs: build
    runs-on: ubuntu-latest
    if: github.event_name == 'push' && github.ref == 'refs/heads/main'
    
    steps:
      - name: Checkout code
        uses: actions/checkout@v3
        
      - name: Set up Docker Buildx
        uses: docker/setup-buildx-action@v2
        
      - name: Login to DockerHub
        uses: docker/login-action@v2
        with:
          username: ${{ secrets.DOCKERHUB_USERNAME }}
          password: ${{ secrets.DOCKERHUB_TOKEN }}
          
      - name: Build and push frontend
        uses: docker/build-push-action@v4
        with:
          context: .
          push: true
          tags: ${{ secrets.DOCKERHUB_USERNAME }}/sentrifense-frontend:latest
          
      - name: Build and push middleware
        uses: docker/build-push-action@v4
        with:
          context: ./middleware
          push: true
          tags: ${{ secrets.DOCKERHUB_USERNAME }}/sentrifense-middleware:latest
  
  deploy:
    name: Deploy Application
    needs: docker-build
    runs-on: ubuntu-latest
    if: github.event_name == 'push' && github.ref == 'refs/heads/main'
    
    steps:
      - name: Checkout code
        uses: actions/checkout@v3
        
      - name: Install SSH key
        uses: shimataro/ssh-key-action@v2
        with:
          key: ${{ secrets.SSH_PRIVATE_KEY }}
          known_hosts: ${{ secrets.SSH_KNOWN_HOSTS }}
          
      - name: Deploy to production
        run: |
          ssh ${{ secrets.SSH_USER }}@${{ secrets.SSH_HOST }} << 'EOF'
            cd ~/sentrifense
            git pull
            docker-compose pull
            docker-compose up -d
            docker system prune -af
          EOF 